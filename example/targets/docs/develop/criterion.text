<!-- block(vars) -->
<!-- vars(
page.title=开发规范
) -->
<!-- block(docPath) -->
[开发规范](/docs/develop/criterion.html)

<!-- block(docTOC) -->
[TOC]

<!-- block(mainBody) -->
# 开发规范

为了整体代码风格统一，思想一致，所有参与本项目的开发者须了解并遵守本文的规范。

## 目的与原则

elf+js项目旨在积累大量的JavaScript常用基础方法，解决开发中浏览器兼容性问题，形成一套组织结构合理功能丰富的基础库。并在此之上通过易用性的设计，简化大多数常用方法的入口书写方式，给使用elf+js基础库的应用开发者带来愉悦的开发体验。

所以开发elf+js项目需要遵循以下原则：

* 针对jslib基础库：
  0. 每个设计的功能解决单一的一类问题（单一职责）；
  0. 所设计的功能都只解决共性问题，不因为业务特定问题设计新功能；
  0. 每一类功能由一个类（JavaScript对象或构造器）覆盖；
* 针对elf易用性封装：
  0. 不增加新功能，只完成对jslib中的易用性封装；
  0. 缩短jslib中常用方法的调用入口；
  0. 包含jslib的所有功能但不覆盖原有接口；
  0. 只为常用方法设计；

## 文件组织规范

0. 每个类一个文件，除非该类是静态类且对应一类功能的具体调用方法相关性不高时，可以把调用方法的文件分散到同名子级目录中；
0. 文件名同类名/方法名（包括大小写），但不需要包含完整的命名空间路径；
0. 解决同一领域问题的类划分为一个包，即文件夹；
0. 如果代码内容只是一个执行过程（如解决兼容性问题）时，则文件命名以“~”开头，并取符合内容意义的文件名；

## 代码规范

### 命名规范

0. 包/类/方法/变量/常量等原则上参照Java的命名；
  0. 包名全部小写，原则上尽量短，只能使用一个单词或缩写单词；
  0. 类名首字母大写，多单词驼峰；
  0. 方法名首字母小写，多单词驼峰；
  0. 变量名同方法名；
  0. 常量全部字母大写，多单词下划线“_”连接；
  0. 所有命名须使用尽量符合对应意义的英文单词或缩写，禁止使用汉语拼音；
0. 顶级命名空间为`js.`；
0. 在`js`之下设置二级功能包，对应领域相关问题，任何一个类都必须定义在二级命名空间之下，即`js`命名空间下禁止放置任何类；
0. 二级包下可以放置类，在类较多（原则上超过30个）时，也可以划分更深层次的包，此级开始允许包内同时存在包和类；
0. 单纯的函数功能必须挂靠在一个静态类之下，以表明相关的功能相关性，禁止直接在包下直接申明函数；

### 编码

(to be writen...)

#### 变量

#### 函数

##### 函数定义场景

* 静态函数
  0. 禁止在静态函数内部使用`this`指针，因为静态函数可能被用于任意scope的调用，例如迭代器等；
* 成员函数
* 闭包函数

(to be writen...)

## 版本控制

### 分支管理

master
:	主干分支，和正式发布版本保持完全一致

dev-x.x.x
:	开发分支，所有开发都必须使用非master的分支

hotfix
:	紧急修复分支，当某个产品线发现有线上问题急需修复时，从master创建一个临时修复分支来进行修复

### 发布周期

0. 收集需求（wish-list）和问题反馈（bug-list），评估一份两周之内可以完成的且相关性较高的工作内容，建立dev-x.x.x版本分支开始开发
0. 开发结束并测试通过后合并到master分支准备发布
0. 发布后删除对应的dev-x.x.x分支

### 版本号相关

0. 对外发布使用三位版本号，如`0.3.0`
0. 在下一版本要进行当前功能问题修复或相关功能小范围改进时，第三位版本号+1
0. 在下一版本中部分接口发生调整或增加新功能时，第二位版本号+1
0. 在整体大范围接口变动或组织结构重构是，首位版本号+1

-EOF-